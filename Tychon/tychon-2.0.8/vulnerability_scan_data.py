import logging
import urllib
import json
import ssl
from urllib import request, parse
from urllib.request import HTTPError, URLError
from datetime import datetime

ip = params["connect_tychonelastic_ip"]
port = params["connect_tychonelastic_port"]
apiKey = params["connect_tychonelastic_api_key"]
index = params["connect_tychonelastic_cve_scan_index"]

#dependencies
mac = params["mac"]
host_name = params["nbthost"]

upper_mac = mac.upper()
colon_mac = ":".join(upper_mac[i:i+2] for i in range(0,12,2))

query = {
    "track_total_hits": False,
    "sort": [
        {
          "@timestamp": {
            "order": "asc"
          }
        }
    ],
    "_source": [
        "event.created",
        "vulnerability.scan.pass",
        "vulnerability.scan.total",
        "vulnerability.scan.year",
        "vulnerability.scan.fail",
        "event.scan.definition_version"
    ],
    "size": 50,
    "query": {
        "bool": {
          "must": [],
          "filter": [
            {
              "match_phrase": {
                "host.hostname": host_name
              }
            },
            {
              "exists": {
                "field": "vulnerability.scan.total"
              }
            },
            {
              "match_phrase": {
                "host.mac": colon_mac
              }
            }
          ]
        }
    }
}

data = json.dumps(query).encode("utf-8")

request = urllib.request.Request(url='https://'+ip+':'+port+'/'+index+'/_search')
request.add_header("accept", "application/json")
request.add_header("Authorization", "ApiKey " + apiKey)
request.add_header("Content-Type", "application/json")
request.method = "GET"
request.data = data

response = {
    "properties": {}
}
rtn = []

response["properties"]["connect_tychonelastic_vulnerability_last_check"] = 0

try:
    with urllib.request.urlopen(request, context=ssl_context) as resp:
        resp_bytes = resp.read()
        resp_ascii = resp_bytes.decode(encoding="UTF-8")
        obj = json.loads(resp_ascii)
        if 'hits' in obj:
            if 'hits' in obj['hits']:
                for o in obj['hits']['hits']:
                    if '_source' in o:
                       data = o['_source']
                       composite_entry = {}
                       composite_entry["totalyearscanpass"] = data["vulnerability.scan.pass"]
                       composite_entry["totalyearscantotal"] = data["vulnerability.scan.total"]
                       composite_entry["cveyear"] = data["vulnerability.scan.year"]
                       composite_entry["totalyearscanfail"] = data["vulnerability.scan.fail"]
                       composite_entry["scanyeardefintiondate"] = int(datetime.fromtimestamp(float(data["event.scan.definition_version"]) / 1000.0).timestamp())

                       response["properties"]["connect_tychonelastic_vulnerability_last_check"] = int(datetime.strptime(data["event.created"], "%Y-%m-%dT%H:%M:%SZ").strftime('%s'))
                       rtn.append(composite_entry)

    response["properties"]["connect_tychonelastic_vulnerabilty_year_results"] = rtn
    logging.debug("Returning response object to infrastructure. response=[{}]".format(response))
except HTTPError as e:
    response["error"] = "HTTPError: {}".format(e.code)
except URLError as e:
	response["error"] = "URLError: {}".format(e.reason)
except Exception as e:
	response["error"] = "Exception: {}".format(str(e))