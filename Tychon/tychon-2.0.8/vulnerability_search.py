import logging
import urllib
import json
import ssl
from urllib import request, parse
from urllib.request import HTTPError, URLError

ip = params["connect_tychonelastic_ip"]
port = params["connect_tychonelastic_port"]
apiKey = params["connect_tychonelastic_api_key"]
cves = params["connect_tychonelastic_cve_list"]
index = params["connect_tychonelastic_cve_iava_index"]

cvelist = []

if (len(cves) > 0):
    logging.info(cves)
    for c in cves.split(","):
        cvelist.append({"term":
                            {"vulnerability.id.keyword":c
                             }})



#dependencies
mac = params["mac"]
host_name = params["nbthost"]

upper_mac = mac.upper()
colon_mac = ":".join(upper_mac[i:i+2] for i in range(0,12,2))

query = {
    "query": {
        "bool": {
            "filter":[
                {
                    "bool": {
                        "should":{
                            "match_phrase":{
                                "host.mac.keyword": colon_mac
                            }
                        }
                    }
                },
                {
                    "bool": {
                        "should":{
                            "match_phrase":{
                                "host.hostname.keyword": host_name
                            }
                        }
                    }
                }
            ]
        }
    },"aggs":{
      "severity":{
          "terms": {
           "field": "vulnerability.severity.keyword"
          },
          "aggs":{
            "vulnerable": {
             "terms": {
               "field": "vulnerability.result.keyword"
             }
           }
          }
      }
    },"size": 0
}
if len(cvelist) > 0:
    query["query"]["bool"]["filter"].append({"bool":{"should":cvelist}})

data = json.dumps(query).encode("utf-8")

request = urllib.request.Request(url='https://'+ip+':'+port+'/'+index+'/_search')
request.add_header("accept", "application/json")
request.add_header("Authorization", "ApiKey " + apiKey)
request.add_header("Content-Type", "application/json")
request.method = "GET"
request.data = data

response = {}
properties = {}

total_fail = 0
total_pass = 0
vulnerability_type_fail_count = {
    "MEDIUM": 0,
    "HIGH": 0,
    "LOW": 0
}
vulnerability_type_pass_count = {
    "MEDIUM": 0,
    "HIGH": 0,
    "LOW": 0
}

try:
    with urllib.request.urlopen(request, context=ssl_context) as resp:
        resp_bytes = resp.read()
        resp_ascii = resp_bytes.decode(encoding="UTF-8")
        obj = json.loads(resp_ascii)
        if 'aggregations' in obj:
            if 'severity' in obj["aggregations"]:
                if 'buckets' in obj['aggregations']['severity']:
                    for sevy in obj['aggregations']['severity']['buckets']:
                        sev = sevy["key"]
                        if 'vulnerable' in sevy:
                            if 'buckets' in sevy['vulnerable']:
                                for hitr in sevy['vulnerable']['buckets']:
                                    if 'key' in hitr:
                                        key = hitr["key"]
                                        if 'fail' == key and sev in vulnerability_type_fail_count:
                                            vulnerability_type_fail_count[sev] = hitr["doc_count"]
                                            total_fail = total_fail + hitr["doc_count"]
                                        elif 'pass' == key and sev in vulnerability_type_pass_count:
                                            vulnerability_type_pass_count[sev] = hitr["doc_count"]
                                            total_pass = total_pass + hitr["doc_count"]

    composite_item = {
        "totalcvepass": total_pass,
        "totalcvefail": total_fail,
        "cvefailhigh": vulnerability_type_fail_count["HIGH"],
        "cvefailmedium": vulnerability_type_fail_count["MEDIUM"],
        "cvefaillow": vulnerability_type_fail_count["LOW"],
        "cvepasshigh": vulnerability_type_pass_count["HIGH"],
        "cvepassmedium": vulnerability_type_pass_count["MEDIUM"],
        "cvepasslow": vulnerability_type_pass_count["LOW"]
    }

    properties['connect_tychonelastic_vulnerabilities'] = composite_item
    response["properties"] = properties
    logging.debug("Returning response object to infrastructure. response=[{}]".format(response))
except HTTPError as e:
    response["error"] = "HTTPError: {}".format(e.code)
except URLError as e:
	response["error"] = "URLError: {}".format(e.reason)
except Exception as e:
	response["error"] = "Exception: {}".format(str(e))
